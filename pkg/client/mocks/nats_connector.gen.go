// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/osapi-io/nats-client/pkg/client (interfaces: NATSConnector)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nats "github.com/nats-io/nats.go"
)

// MockNATSConnector is a mock of NATSConnector interface.
type MockNATSConnector struct {
	ctrl     *gomock.Controller
	recorder *MockNATSConnectorMockRecorder
}

// MockNATSConnectorMockRecorder is the mock recorder for MockNATSConnector.
type MockNATSConnectorMockRecorder struct {
	mock *MockNATSConnector
}

// NewMockNATSConnector creates a new mock instance.
func NewMockNATSConnector(ctrl *gomock.Controller) *MockNATSConnector {
	mock := &MockNATSConnector{ctrl: ctrl}
	mock.recorder = &MockNATSConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNATSConnector) EXPECT() *MockNATSConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNATSConnector) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockNATSConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNATSConnector)(nil).Close))
}

// Connect mocks base method.
func (m *MockNATSConnector) Connect(arg0 string, arg1 ...nats.Option) (*nats.Conn, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(*nats.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockNATSConnectorMockRecorder) Connect(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockNATSConnector)(nil).Connect), varargs...)
}

// ConnectedUrl mocks base method.
func (m *MockNATSConnector) ConnectedUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// ConnectedUrl indicates an expected call of ConnectedUrl.
func (mr *MockNATSConnectorMockRecorder) ConnectedUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedUrl", reflect.TypeOf((*MockNATSConnector)(nil).ConnectedUrl))
}

// JetStream mocks base method.
func (m *MockNATSConnector) JetStream(arg0 ...nats.JSOpt) (nats.JetStreamContext, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JetStream", varargs...)
	ret0, _ := ret[0].(nats.JetStreamContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JetStream indicates an expected call of JetStream.
func (mr *MockNATSConnectorMockRecorder) JetStream(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JetStream", reflect.TypeOf((*MockNATSConnector)(nil).JetStream), arg0...)
}

// QueueSubscribe mocks base method.
func (m *MockNATSConnector) QueueSubscribe(arg0, arg1 string, arg2 nats.MsgHandler) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSubscribe", arg0, arg1, arg2)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueSubscribe indicates an expected call of QueueSubscribe.
func (mr *MockNATSConnectorMockRecorder) QueueSubscribe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockNATSConnector)(nil).QueueSubscribe), arg0, arg1, arg2)
}

// Subscribe mocks base method.
func (m *MockNATSConnector) Subscribe(arg0 string, arg1 nats.MsgHandler) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNATSConnectorMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNATSConnector)(nil).Subscribe), arg0, arg1)
}
