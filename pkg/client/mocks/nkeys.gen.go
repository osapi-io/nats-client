// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nats-io/nkeys (interfaces: KeyPair)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKeyPair is a mock of KeyPair interface.
type MockKeyPair struct {
	ctrl     *gomock.Controller
	recorder *MockKeyPairMockRecorder
}

// MockKeyPairMockRecorder is the mock recorder for MockKeyPair.
type MockKeyPairMockRecorder struct {
	mock *MockKeyPair
}

// NewMockKeyPair creates a new mock instance.
func NewMockKeyPair(ctrl *gomock.Controller) *MockKeyPair {
	mock := &MockKeyPair{ctrl: ctrl}
	mock.recorder = &MockKeyPairMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyPair) EXPECT() *MockKeyPairMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockKeyPair) Open(arg0 []byte, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockKeyPairMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockKeyPair)(nil).Open), arg0, arg1)
}

// PrivateKey mocks base method.
func (m *MockKeyPair) PrivateKey() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateKey")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateKey indicates an expected call of PrivateKey.
func (mr *MockKeyPairMockRecorder) PrivateKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateKey", reflect.TypeOf((*MockKeyPair)(nil).PrivateKey))
}

// PublicKey mocks base method.
func (m *MockKeyPair) PublicKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockKeyPairMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockKeyPair)(nil).PublicKey))
}

// Seal mocks base method.
func (m *MockKeyPair) Seal(arg0 []byte, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seal", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seal indicates an expected call of Seal.
func (mr *MockKeyPairMockRecorder) Seal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockKeyPair)(nil).Seal), arg0, arg1)
}

// SealWithRand mocks base method.
func (m *MockKeyPair) SealWithRand(arg0 []byte, arg1 string, arg2 io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SealWithRand", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SealWithRand indicates an expected call of SealWithRand.
func (mr *MockKeyPairMockRecorder) SealWithRand(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SealWithRand", reflect.TypeOf((*MockKeyPair)(nil).SealWithRand), arg0, arg1, arg2)
}

// Seed mocks base method.
func (m *MockKeyPair) Seed() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seed")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seed indicates an expected call of Seed.
func (mr *MockKeyPairMockRecorder) Seed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seed", reflect.TypeOf((*MockKeyPair)(nil).Seed))
}

// Sign mocks base method.
func (m *MockKeyPair) Sign(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockKeyPairMockRecorder) Sign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockKeyPair)(nil).Sign), arg0)
}

// Verify mocks base method.
func (m *MockKeyPair) Verify(arg0, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockKeyPairMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockKeyPair)(nil).Verify), arg0, arg1)
}

// Wipe mocks base method.
func (m *MockKeyPair) Wipe() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wipe")
}

// Wipe indicates an expected call of Wipe.
func (mr *MockKeyPairMockRecorder) Wipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wipe", reflect.TypeOf((*MockKeyPair)(nil).Wipe))
}
